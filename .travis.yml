# outline:
# 1. install gcloud cli
# 2. configure cli with project/auth info, and kubectl
# 3. login to docker CLI
# 4. buil "test" version of multi-client
# 5. run tests
# 6. if test successful, run script to deploy newest images
# 7. build all our images, tag each one, and push to docker hub
# 8. apply all configs in k8s folder
# 9. imperatively set latest images on each deployment

# workaround
language: generic

# tell travis CI that superadmin is required
sudo: required

# tell travis CI you need a copy of docker
services:
  - docker

# environment variables
env:
  global:
    # git sha value used to tag builds
    - GIT_SHA=$(git rev-parse HEAD)
    # makes sure gcloud cli doesn't try to display prompts
    - CLOUDSDK_CORE_DISABLE_PROMPTS=1

before_install:
  # STEP 1
  # commands to install and configure Google Cloud CLI
  - curl https://sdk.cloud.google.com | bash -s -- --disable-prompts > /dev/null;
  - source $HOME/google-cloud-sdk/path.bash.inc
  
  # STEP 2
  # install kubectl
  - gcloud components update kubectl
  # below line is generated by travis encrypt-file command to decrypt the file
  - openssl aes-256-cbc -K $encrypted_9f3b5599b056_key -iv $encrypted_9f3b5599b056_iv -in service-account.json.enc -out service-account.json -d
  # authenticate (with the decrypted service-account.json file)
  - gcloud auth activate-service-account --key-file service-account.json
  # select to GCloud project to do work on (use project id, not the name)
  - gcloud config set project abiding-cistern-315717
  # select the region where your k8 cluster is located
  - gcloud config set compute/zone northamerica-northeast1-a
  # configure gcloud to work with our "multi-cluster" k8s cluster we created in GUI
  - gcloud container clusters get-credentials multi-cluster
  # login to docker hub (the username/pw we will pass into Travis as env variables)
  
  # STEP 3
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  
  # STEP 4
  - docker build -t kidobi/react-test -f ./client/Dockerfile.dev ./client

script:
  # STEP 5
  - docker run -e CI=true kidobi/react-test npm test

deploy:
  # STEP 6-8
  # because there's no built-in kubernetes provider, we'll have to run our own custom scripts
  provider: script
  script: bash ./deploy.sh
  on:
    branch: master
